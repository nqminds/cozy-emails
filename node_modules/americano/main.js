// Generated by CoffeeScript 1.9.0

/*
 * Unique file describing all the configuration steps done by americano.
 */
var afterMiddlewares, americano, config, express, fs, log, logFormat, morgan, path, _bundleMiddleware,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty;

express = require('express');

fs = require('fs');

path = require('path');

log = require('printit')({
  date: true,
  prefix: 'americano'
});

morgan = require('morgan');

logFormat = '[:date] - :method :url - :status - ' + ':response-time ms -  :res[content-length]';

morgan.format('short', logFormat);

module.exports = americano = express;

_bundleMiddleware = function(name, moduleName) {
  return Object.defineProperty(americano, name, {
    value: require(moduleName)
  });
};

_bundleMiddleware('bodyParser', 'body-parser');

_bundleMiddleware('methodOverride', 'method-override');

_bundleMiddleware('errorHandler', 'errorhandler');

_bundleMiddleware('logger', 'morgan');

afterMiddlewares = [];

config = {
  common: {
    use: [
      americano.bodyParser(), americano.methodOverride(), americano["static"](__dirname + '/../../client/public', {
        maxAge: 86400000
      })
    ],
    useAfter: [
      americano.errorHandler({
        dumpExceptions: true,
        showStack: true
      })
    ]
  },
  development: [americano.logger('dev')],
  production: [americano.logger('short')]
};

americano._configure = function(options, app) {
  var env, err, middlewares, _results;
  try {
    config = require(path.join(options.root, "server", "config"));
  } catch (_error) {
    err = _error;
    log.error(err.stack || err);
    log.warn("Can't load config file, use default one instead");
  }
  _results = [];
  for (env in config) {
    middlewares = config[env];
    _results.push(americano._configureEnv(app, env, middlewares));
  }
  return _results;
};

americano._configureEnv = function(app, env, middlewares) {
  var element, elements, key, method, middleware, value, _i, _len, _results, _results1;
  if (env === 'common' || env === app.get('env')) {
    if (middlewares instanceof Array) {
      _results = [];
      for (_i = 0, _len = middlewares.length; _i < _len; _i++) {
        middleware = middlewares[_i];
        if (!(middleware instanceof Array)) {
          middleware = [middleware];
        }
        _results.push(app.use.apply(app, middleware));
      }
      return _results;
    } else {
      _results1 = [];
      for (method in middlewares) {
        elements = middlewares[method];
        if (method === 'beforeStart' || method === 'afterStart') {
          _results1.push(app[method] = elements);
        } else if (method === 'use') {
          _results1.push((function() {
            var _j, _len1, _results2;
            _results2 = [];
            for (_j = 0, _len1 = elements.length; _j < _len1; _j++) {
              element = elements[_j];
              _results2.push(app[method](element));
            }
            return _results2;
          })());
        } else if (method === 'useAfter') {
          _results1.push((function() {
            var _j, _len1, _results2;
            _results2 = [];
            for (_j = 0, _len1 = elements.length; _j < _len1; _j++) {
              element = elements[_j];
              _results2.push(afterMiddlewares.push(element));
            }
            return _results2;
          })());
        } else {
          _results1.push((function() {
            var _results2;
            _results2 = [];
            for (key in elements) {
              value = elements[key];
              app[method].apply(app, [key, value]);
              _results2.push(app.get(key));
            }
            return _results2;
          })());
        }
      }
      return _results1;
    }
  }
};

americano._configureAfter = function(app) {
  var middleware, _i, _len;
  for (_i = 0, _len = afterMiddlewares.length; _i < _len; _i++) {
    middleware = afterMiddlewares[_i];
    app.use(middleware);
  }
  return afterMiddlewares = [];
};

americano._loadRoutes = function(options, app) {
  var controller, controllers, err, rPath, reqpath, routes, verb;
  try {
    rPath = path.join(options.root, "server", "controllers", "routes");
    routes = require(rPath);
  } catch (_error) {
    err = _error;
    log.error(err.stack || err);
    log.warn("Route configuration file is missing, make " + "sure routes.(coffee|js) is located at the root of" + " the controllers folder.");
    log.warn("No routes loaded");
  }
  for (reqpath in routes) {
    controllers = routes[reqpath];
    for (verb in controllers) {
      controller = controllers[verb];
      americano._loadRoute(app, reqpath, verb, controller);
    }
  }
  if (!options.silent) {
    return log.info("Routes loaded.");
  }
};

americano._loadRoute = function(app, reqpath, verb, controller) {
  var err;
  try {
    if (verb === "param") {
      return app.param(reqpath, controller);
    } else {
      if (controller instanceof Array) {
        return app[verb].apply(app, ["/" + reqpath].concat(controller));
      } else {
        return app[verb]("/" + reqpath, controller);
      }
    }
  } catch (_error) {
    err = _error;
    log.error("Can't load controller for route " + verb + ": " + reqpath);
    log.raw(err.stack || err);
    return process.exit(1);
  }
};

americano._loadPlugin = function(options, app, plugin, callback) {
  var err, pluginPath;
  if (!options.silent) {
    log.info("add plugin: " + plugin);
  }
  if (plugin.indexOf('/') === -1) {
    pluginPath = plugin;
  } else {
    pluginPath = path.join(options.root, plugin);
  }
  try {
    plugin = require(pluginPath);
    __extends(americano, plugin);
    return americano.configure(options, app, callback);
  } catch (_error) {
    err = _error;
    return callback(err);
  }
};

americano._loadPlugins = function(options, app, callback) {
  var pluginList, _loadPluginList;
  pluginList = config.plugins;
  _loadPluginList = function(list) {
    var plugin;
    if (list.length > 0) {
      plugin = list.pop();
      return americano._loadPlugin(options, app, plugin, function(err) {
        if (err) {
          log.error(plugin + " failed to load.");
          log.raw(err);
        } else {
          if (!options.silent) {
            log.info(plugin + " loaded.");
          }
        }
        return _loadPluginList(list);
      });
    } else {
      return callback();
    }
  };
  if ((pluginList != null ? pluginList.length : void 0) > 0) {
    return _loadPluginList(pluginList);
  } else {
    return callback();
  }
};

americano._new = function(options, callback) {
  var app;
  app = americano();
  americano._configure(options, app);
  return americano._loadPlugins(options, app, function(err) {
    if (err) {
      return callback(err);
    }
    americano._loadRoutes(options, app);
    americano._configureAfter(app);
    return callback(null, app);
  });
};

americano.start = function(options, callback) {
  if (process.env.NODE_ENV == null) {
    process.env.NODE_ENV = 'development';
  }
  if (options.port == null) {
    options.port = 3000;
  }
  if (options.name == null) {
    options.name = "Americano";
  }
  if (options.host == null) {
    options.host = "127.0.0.1";
  }
  if (options.root == null) {
    options.root = process.cwd();
  }
  return americano._new(options, function(err, app) {
    if (err) {
      return callback(err);
    }
    if (app.beforeStart == null) {
      app.beforeStart = (function(cb) {
        return cb();
      });
    }
    return app.beforeStart(function(err) {
      var server;
      if (err) {
        return callback(err);
      }
      return server = app.listen(options.port, options.host, function(err) {
        if (err) {
          return callback(err);
        }
        if (app.afterStart != null) {
          app.afterStart(app, server);
        }
        if (!options.silent) {
          log.info("Configuration for " + process.env.NODE_ENV + " loaded.\n" + options.name + " server is listening on port " + options.port + "...");
        }
        if (callback != null) {
          return callback(null, app, server);
        }
      });
    });
  });
};

americano.newApp = function(options, callback) {
  if (options.port == null) {
    options.port = 3000;
  }
  if (options.host == null) {
    options.host = "127.0.0.1";
  }
  if (options.name == null) {
    options.name = "Americano";
  }
  return americano._new(options, function(err, app) {
    if (err) {
      return callback(err);
    }
    if (!options.silent) {
      log.info("Configuration for " + process.env.NODE_ENV + " loaded.");
    }
    if (callback != null) {
      return callback(null, app);
    }
  });
};
