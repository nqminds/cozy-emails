// Generated by CoffeeScript 1.8.0
var ApplicationStartup, Mailbox, MailboxRefreshList, Message, OrphanRemoval, Process, async, cozydb, log, patchIgnored, ramStore, safeLoop,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Process = require('./_base');

OrphanRemoval = require('./orphan_removal');

patchIgnored = require('../patchs/ignored');

log = require('../utils/logging')({
  prefix: 'process:application_startup'
});

ramStore = require('../models/store_account_and_boxes');

Message = require('../models/message');

Mailbox = require('../models/mailbox');

safeLoop = require('../utils/safeloop');

cozydb = require('cozy-db-pouchdb');

async = require('async');

MailboxRefreshList = require('../processes/mailbox_refresh_list');

module.exports = ApplicationStartup = (function(_super) {
  __extends(ApplicationStartup, _super);

  function ApplicationStartup() {
    return ApplicationStartup.__super__.constructor.apply(this, arguments);
  }

  ApplicationStartup.prototype.code = 'application-startup';

  ApplicationStartup.prototype.initialize = function(options, callback) {
    return async.series([this.forceCozyDBReindexing, ramStore.initialize, this.initializeNewAccounts, patchIgnored.patchAllAccounts, this.removeOrphans], callback);
  };

  ApplicationStartup.prototype.forceCozyDBReindexing = function(callback) {
    log.debug("cozydbReindexing");
    return cozydb.forceReindexing(callback);
  };

  ApplicationStartup.prototype.initializeNewAccounts = function(callback) {
    log.debug("initializeNewAccounts");
    return safeLoop(ramStore.getUninitializedAccount(), function(account, next) {
      var refreshList;
      refreshList = new MailboxRefreshList({
        account: account
      });
      return refreshList.run((function(_this) {
        return function(err) {
          var boxes, changes;
          if (err) {
            return next(err);
          }
          boxes = ramStore.getMailboxesByAccount(_this.id);
          changes = Mailbox.scanBoxesForSpecialUse(boxes);
          changes.initialized = true;
          return account.updateAttributes(changes, next);
        };
      })(this));
    }, function(errors) {
      var err, _i, _len, _ref;
      _ref = errors || [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        err = _ref[_i];
        log.error('failed to init account', err);
      }
      return callback(null);
    });
  };

  ApplicationStartup.prototype.removeOrphans = function(callback) {
    var proc;
    proc = new OrphanRemoval();
    return proc.run(callback);
  };

  return ApplicationStartup;

})(Process);
